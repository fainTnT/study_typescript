{
/*
  执行tsc -w指令:热编译
  tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
    "include":用来指定哪些Ts文件需要被编译
    路径:** 表示任意目录
         *  表示任意文件  
    "exclude":不需要被编译的文件目录
        默认值：["node_modules","bower_components","jspm_packages"]
  
  
*/
  "include":[
    "./src/**/*"
  ],
  "exclude":[
    "./src/hello/**/*"
  ],
  /*
    compilerOptions 编译器的选项
  */
  "compilerOptions": {
    // target 用来指定ts被编译为的es的版本
    // 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext'
    "target":"es6",
    // module 指定要使用模块化的规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'esnext'
    "module": "system",
    // lib 用来指定项目中要使用的库
    //  'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 
    // 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 
    // 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 
    // 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 
    // 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 
    // 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 
    // 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', 
    // 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2021.promise', 
    // 'es2021.string', 'es2021.weakref', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 
    // 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'
    "lib":["es5"],
    // outDir 指定编译后文件所在的目录
    "outDir": "./dist",
    // outFile 将代码合并成一个文件
    "outFile":"./dist/app.js",
    // allowJs 是否对JS文件一起进行编译
    "allowJs": false,
    // checkJs 是否检查JS代码是否符合语法规范
    "checkJs": false,
    // removeComments 是否移除注释
    "removeComments": false,
    // noEmit 不生成编译后的文件
    "noEmit": false,
    // noEmitOnError 当代码有错误时不生成编译后文件
    "noEmitOnError": false,
    // alwaysStrict 用来设置编译后的文件是否使用严格模式
    "alwaysStrict": false,
    // noImplicitAny 不允许隐式的any类型
    "noImplicitAny": false,
    // noImplicitThis 不允许不明确类型的this
    "noImplicitThis": false,
    // strictNullChecks 严格检查空值null
    "strictNullChecks": false,
    // strict 设置所有的严格检测
    "strict": true
  }
}